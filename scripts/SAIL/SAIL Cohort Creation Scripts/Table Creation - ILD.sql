------------------------ TABLE CREATION FOR PROJECT 1387 -- ILD -------------- 

--- SEARCH FOR --// for code segments that need alteration to match project requirements

------------------------------------------------------------------------------------SETUP--------------------------------------------------------------------------------------------------
-------- Identify First Event for each ALF 

-- Select the first diagnosis for each ALF
DECLARE GLOBAL TEMPORARY TABLE MIN_ILD_DIAG AS (
SELECT DISTINCT wgec.ALF_PE, MIN(wgec.EVENT_DT) AS FIRST_DIAGNOSIS_DT
FROM SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec 
INNER JOIN sailw1387v.SS_ILD_CODES ILD ON ILD.EVENT_CD = wgec.EVENT_CD 
LEFT JOIN SAIL1387V.WDSD_AR_PERS_20220307 per  ON per.ALF_PE = wgec.ALF_PE
WHERE (wgec.GNDR_CD = '1' OR wgec.GNDR_CD = '2') --// only alows for a clearly defined gender code - delete if not applicable 
AND (DOD > '01/01/2004' OR DOD IS NULL)  --// change '01/01/2004' to projects start date
AND (wgec.EVENT_DT > wgec.WOB) 
AND (YEAR(wgec.EVENT_DT)- YEAR(per.WOB)) >= '40' --// remove events where the person is under 40 - remove if not applicable for the project
AND ILD.EVENT_CD = wgec.EVENT_CD 
GROUP BY wgec.ALF_PE
ORDER BY wgec.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- Delete any events before 1930 as they are very likely incorrect entries 
DELETE FROM SESSION.MIN_ILD_DIAG WHERE FIRST_DIAGNOSIS_DT < '01/01/1930' --// Optional but was done to try and improve data quality

-- prototype cohort for generating WIMD and Ethnicity extraction
DECLARE GLOBAL TEMPORARY TABLE prototype_cohort_ILD AS (
SELECT DISTINCT wgec.ALF_PE ,per.WOB, per.DOD, per.GNDR_CD, FIRST_DIAGNOSIS_DT
FROM SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec 
LEFT JOIN SAIL1387V.WDSD_AR_PERS_20220307 per  ON per.ALF_PE = wgec.ALF_PE
LEFT JOIN SESSION.MIN_ILD_DIAG mid ON wgec.ALF_PE = mid.ALF_PE
INNER JOIN sailw1387v.SS_ILD_CODES ild ON ild.EVENT_CD = wgec.EVENT_CD 
WHERE (per.GNDR_CD = '1' OR per.GNDR_CD = '2')  --// only alows for a clearly defined gender code - delete if not applicable 
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

------------------------------------------------------------------------------------ WIMD/LSOA -------------------------------------------------------------------------------------------------

-- select all WIMD Entries for cohort 
DECLARE GLOBAL TEMPORARY TABLE ALL_LSOA_WIMD AS (
SELECT rt.ALF_PE, lsoa.WIMD_2011_QUINTILE , START_DATE , END_DATE , WIMD_2011_SCORE 
FROM SESSION.prototype_cohort_ILD rt
LEFT JOIN sail1387v.WDSD_CLEAN_ADD_GEOG_CHAR_LSOA2001_20220307 lsoa ON rt.ALF_PE = lsoa.ALF_PE 
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

SELECT * FROM sail1387v.WDSD_CLEAN_ADD_GEOG_CHAR_LSOA2001_20220307 

-- Drop table to add changes if needed
DROP TABLE sailw1387V.SS_ILD_LSOA_ALL

-- Create perminent table 
CREATE TABLE sailw1387V.SS_ILD_LSOA_ALL(
ALF_PE BIGINT
, WIMD_2011_QUINTILE int
, START_DATE DATE
, END_DATE DATE
, WIMD_2011_SCORE DECIMAL);

INSERT INTO sailw1387V.SS_ILD_LSOA_ALL
SELECT DISTINCT 
ALF_PE
, WIMD_2011_QUINTILE 
, START_DATE 
, END_DATE 
, WIMD_2011_SCORE 
FROM SESSION.ALL_LSOA_WIMD
ORDER BY ALF_PE ;

-- Select the most recent WIMD Date from the study period 
DECLARE GLOBAL TEMPORARY TABLE LATEST_WIMD_DATE AS (
SELECT DISTINCT ALF_PE, MAX(START_DATE) AS LATEST_START_DATE, MAX(END_DATE) AS LATEST_END_DATE
FROM SESSION.ALL_LSOA_WIMD
WHERE YEAR(END_DATE) > '2014' OR END_DATE IS NULL OR END_DATE='9999-01-01' --// change to suit data avaliability/the projects end date best
GROUP BY ALF_PE
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- inner join with all WIMD to get the latest value for each ALF
DECLARE GLOBAL TEMPORARY TABLE LSOA_ILD AS (
SELECT DISTINCT alw.ALF_PE, WIMD_2011_QUINTILE , START_DATE , END_DATE , WIMD_2011_SCORE 
FROM SESSION.ALL_LSOA_WIMD alw
INNER JOIN SESSION.LATEST_WIMD_DATE lwd ON alw.ALF_PE = lwd.ALF_PE AND alw.START_DATE = lwd.LATEST_START_DATE AND alw.END_DATE = lwd.LATEST_END_DATE
WHERE YEAR(END_DATE) >='2014' OR END_DATE IS NULL OR END_DATE='9999-01-01' --// change to suit data avaliability/the projects end date best
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DROP TABLE sailw1387V.SS_ILD_LSOA

-- Create perminent table 
CREATE TABLE sailw1387V.SS_ILD_LSOA(
ALF_PE BIGINT
, WIMD_2011_QUINTILE int
, START_DATE DATE
, END_DATE DATE
, WIMD_2011_SCORE DECIMAL);

INSERT INTO sailw1387V.SS_ILD_LSOA
SELECT DISTINCT 
ALF_PE
, WIMD_2011_QUINTILE 
, START_DATE 
, END_DATE 
, WIMD_2011_SCORE 
FROM SESSION.LSOA_ILD
ORDER BY ALF_PE ;

------------------------------------------------------------------------------------Ethnicity TABLE--------------------------------------------------------------------------------------------------
--// IMPORTANT - Delete or ignore if a project does not have ethnicity in IGRP - I intend to make a script with this removed by default in the future when I have the time 

-- select the most common ethnicity for each ALF
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_COUNT AS (
SELECT wgec.ALF_PE, COUNT(ec.READCODE ) AS Ethnicity_Code_Count, ec.READCODE AS Ethnicity_Code, Ethnicity6
FROM SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec 
LEFT JOIN sailw1387v.SS_ETHNICITY_CODES ec ON ec.READCODE = wgec.EVENT_CD 
INNER JOIN SESSION.prototype_cohort_ILD rt ON rt.ALF_PE = wgec.ALF_PE 
WHERE wgec.EVENT_CD = ec.READCODE
GROUP BY wgec.ALF_PE, ec.READCODE, Ethnicity6
ORDER BY wgec.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_MAX AS (
SELECT DISTINCT ALF_PE, MAX(Ethnicity_Code_Count) AS MAX_COUNT
FROM SESSION.ETHNICITY_COUNT ec
GROUP BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_MOST_COMMON AS (
SELECT DISTINCT em.ALF_PE, Ethnicity_Code, MAX_COUNT 
FROM SESSION.ETHNICITY_COUNT ec 
INNER JOIN SESSION.ETHNICITY_MAX em ON ec.Ethnicity_Code_Count = em.MAX_COUNT AND ec.alf_pe = em.alf_pe 
WHERE em.ALF_PE = ec.alf_pe AND ec.Ethnicity_Code_Count = em.MAX_COUNT
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- delete where the code reprisents "Not Stated"
DELETE FROM SESSION.ETHNICITY_MOST_COMMON WHERE Ethnicity_Code IN(SELECT READCODE FROM sailw1387v.SS_ETHNICITY_CODES WHERE Ethnicity6 = 'Not Stated') 

-- For cases where events have the same count, select the latest date 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ALF_COUNTS AS (
SELECT DISTINCT ALF_PE, COUNT(ALF_PE) AS COUNTS
FROM SESSION.ETHNICITY_MOST_COMMON
GROUP BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ALF_COUNTS_DUPLICATES AS (
SELECT * FROM SESSION.ETHNICITY_ALF_COUNTS 
WHERE COUNTS > 1
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_DUPLICATES_LATEST_DATE AS (
SELECT eac.ALF_PE, MAX(EVENT_DT) AS latest_event FROM SESSION.ETHNICITY_ALF_COUNTS_DUPLICATES eac
INNER JOIN SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec ON wgec.ALF_PE = eac.ALF_PE
INNER JOIN sailw1387v.SS_ETHNICITY_CODES ec ON ec.READCODE = wgec.EVENT_CD 
WHERE ec.READCODE = wgec.EVENT_CD 
GROUP BY eac.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_DUPLICATES_LATEST_EVENT AS (
SELECT DISTINCT eac.ALF_PE, EVENT_DT, wgec.EVENT_CD AS LATEST_CODE, Ethnicity6, hes_ethnicity  FROM SESSION.ETHNICITY_ALF_COUNTS_DUPLICATES eac
INNER JOIN SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec ON wgec.ALF_PE = eac.ALF_PE
INNER JOIN sailw1387v.SS_ETHNICITY_CODES ec ON ec.READCODE = wgec.EVENT_CD 
INNER JOIN SESSION.ETHNICITY_DUPLICATES_LATEST_DATE edld ON wgec.EVENT_DT = edld.latest_event AND eac.ALF_PE = edld.ALF_PE
WHERE ec.READCODE = wgec.EVENT_CD  
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- Delete From the most common table where there is a duplicate 
DELETE FROM SESSION.ETHNICITY_MOST_COMMON WHERE ALF_PE IN(SELECT ALF_PE FROM SESSION.ETHNICITY_DUPLICATES_LATEST_EVENT)

-- delete where the code reprisents "Not Stated"
DELETE FROM SESSION.ETHNICITY_DUPLICATES_LATEST_EVENT WHERE LATEST_CODE IN(SELECT READCODE FROM sailw1387v.SS_ETHNICITY_CODES WHERE Ethnicity6 = 'Not Stated') 

-- Combine tables
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ILD_BY_DATE_AND_MOST_COMMON AS (
SELECT DISTINCT ALF_PE,  Ethnicity_Code
FROM 
(SELECT ALF_PE,  Ethnicity_Code FROM SESSION.ETHNICITY_MOST_COMMON emc
UNION ALL
SELECT ALF_PE, LATEST_CODE FROM SESSION.ETHNICITY_DUPLICATES_LATEST_EVENT)
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

--------------------------------------- Create hospital table add in -----------------------------------------------------------

-- Select most common ethnicity
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_COUNT_PEDW AS (
SELECT PS.ALF_PE, COUNT(ecp.ETH_GRP_DERIVED_CD) AS Ethnicity_Code_Count, ecp.ETH_GRP_DERIVED_CD AS Ethnicity_Code, ecp.DESCRIPTION
FROM SAIL1387V.PEDW_SPELL_20220228 PS
INNER JOIN  sailw1387v.SS_ETHNICITY_CODES_PEDW ecp ON ecp.ETH_GRP_DERIVED_CD = ps.ETH_GRP_DERIVED_CD AND ecp.DESCRIPTION = ps.ETH_GRP_DERIVED_DESC 
INNER JOIN SESSION.prototype_cohort_ILD rt ON rt.ALF_PE = PS.ALF_PE 
GROUP BY PS.ALF_PE, ecp.ETH_GRP_DERIVED_CD, ecp.DESCRIPTION
ORDER BY PS.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_MAX_PEDW AS (
SELECT DISTINCT ALF_PE, MAX(Ethnicity_Code_Count) AS MAX_COUNT
FROM SESSION.ETHNICITY_COUNT_PEDW ec
GROUP BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_MOST_COMMON_PEDW AS (
SELECT DISTINCT em.ALF_PE, Ethnicity_Code, MAX_COUNT 
FROM SESSION.ETHNICITY_COUNT_PEDW ec 
INNER JOIN SESSION.ETHNICITY_MAX_PEDW em ON ec.Ethnicity_Code_Count = em.MAX_COUNT AND ec.alf_pe = em.alf_pe 
WHERE em.ALF_PE = ec.alf_pe AND ec.Ethnicity_Code_Count = em.MAX_COUNT
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- Delete where code equals "Not Stated" 
DELETE FROM SESSION.ETHNICITY_MOST_COMMON_PEDW WHERE Ethnicity_Code = '9' OR Ethnicity_Code = 'Z' 

-- for cases when multiple ethnicities have the same count, select the latest 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ALF_COUNTS_PEDW AS (
SELECT DISTINCT ALF_PE, COUNT(ALF_PE) AS COUNTS
FROM SESSION.ETHNICITY_MOST_COMMON_PEDW
GROUP BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ALF_COUNTS_DUPLICATES_PEDW AS (
SELECT * FROM SESSION.ETHNICITY_ALF_COUNTS_PEDW
WHERE COUNTS > 1
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_DUPLICATES_LATEST_DATE_PEDW AS (
SELECT eac.ALF_PE, MAX(ADMIS_DT) AS latest_event FROM SESSION.ETHNICITY_ALF_COUNTS_DUPLICATES_PEDW eac
INNER JOIN SAIL1387V.PEDW_SPELL_20220228 wgec ON wgec.ALF_PE = eac.ALF_PE
GROUP BY eac.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_DUPLICATES_LATEST_EVENT_PEDW AS (
SELECT DISTINCT eac.ALF_PE, ADMIS_DT, ec.ETH_GRP_DERIVED_CD AS Ethnicity_Code, ec.DESCRIPTION FROM SESSION.ETHNICITY_ALF_COUNTS_DUPLICATES eac
INNER JOIN SAIL1387V.PEDW_SPELL_20220228 wgec ON wgec.ALF_PE = eac.ALF_PE
INNER JOIN sailw1387v.SS_ETHNICITY_CODES_PEDW ec ON ec.ETH_GRP_DERIVED_CD = wgec.ETH_GRP_DERIVED_CD
INNER JOIN SESSION.ETHNICITY_DUPLICATES_LATEST_DATE_PEDW edld ON wgec.ADMIS_DT = edld.latest_event AND eac.ALF_PE = edld.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- Delete duplicates from counts table 
DELETE FROM SESSION.ETHNICITY_MOST_COMMON WHERE ALF_PE IN(SELECT ALF_PE FROM SESSION.ETHNICITY_DUPLICATES_LATEST_EVENT)

-- Delete where code equals "Not Stated"
DELETE FROM SESSION.ETHNICITY_DUPLICATES_LATEST_EVENT_PEDW WHERE Ethnicity_Code = '9' OR Ethnicity_Code = 'Z'

-- Combine tables 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ILD_BY_DATE_AND_MOST_COMMON_PEDW AS (
SELECT DISTINCT ALF_PE,  Ethnicity_Code
FROM 
(SELECT ALF_PE,  Ethnicity_Code FROM SESSION.ETHNICITY_MOST_COMMON_PEDW emc
UNION ALL
SELECT ALF_PE, Ethnicity_Code FROM SESSION.ETHNICITY_DUPLICATES_LATEST_EVENT_PEDW)
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_DUPLICATES_PEDW AS (
SELECT ALF_PE, COUNT(ALF_PE) AS COUNTS FROM SESSION.ETHNICITY_ILD_BY_DATE_AND_MOST_COMMON_PEDW
GROUP BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- Delete where duplicates still exist in spite of cleaning (where multiple ethnicities have the same count on the latest date)
DELETE FROM SESSION.ETHNICITY_ILD_BY_DATE_AND_MOST_COMMON_PEDW WHERE ALF_PE IN(SELECT ALF_PE FROM SESSION.ETHNICITY_DUPLICATES_PEDW WHERE COUNTS > '1')

--- Combine Hospital and GP tables 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_DUPLICATES AS (
SELECT ALF_PE, COUNT(ALF_PE) AS COUNTS FROM SESSION.ETHNICITY_ILD_BY_DATE_AND_MOST_COMMON
GROUP BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ILD_BASIC AS (
SELECT DISTINCT pci.ALF_PE
, CASE WHEN (ECM.Ethnicity_Code IS NULL OR pci.ALF_PE IN(SELECT ALF_PE FROM SESSION.ETHNICITY_DUPLICATES WHERE COUNTS > '1')) THEN ECMP.Ethnicity_Code ELSE ECM.Ethnicity_Code END AS Ethnicity_Code
FROM SESSION.prototype_cohort_ILD pci
LEFT JOIN SESSION.ETHNICITY_ILD_BY_DATE_AND_MOST_COMMON ECM ON ECM.ALF_PE = pci.ALF_PE
LEFT JOIN SESSION.ETHNICITY_ILD_BY_DATE_AND_MOST_COMMON_PEDW ECMP ON ECMP.ALF_PE = pci.ALF_PE
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ILD AS (
SELECT DISTINCT ALF_PE, Ethnicity_Code
,CASE WHEN Ethnicity6 IS NULL THEN DESCRIPTION ELSE Ethnicity6 END AS ETHNICTITY_DESCRIPTION_5
,CASE WHEN EthnicityEngWales2021 IS NULL THEN DESCRIPTION ELSE EthnicityEngWales2021 END AS ETHNICTITY_DESCRIPTION_11
,CASE WHEN EthnicityEngWales2021 IS NULL THEN DESCRIPTION ELSE hes_ethnicity END AS ETHNICTITY_DESCRIPTION_21
FROM SESSION.ETHNICITY_ILD_BASIC EIB
LEFT JOIN sailw1387v.SS_ETHNICITY_CODES ec ON ec.READCODE = EIB.Ethnicity_Code
LEFT JOIN sailw1387v.SS_ETHNICITY_CODES_PEDW ecp ON ecp.ETH_GRP_DERIVED_CD = EIB.Ethnicity_Code
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS;

/*
--- find not stated 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ILD_NULLS AS (
SELECT * FROM SESSION.ETHNICITY_ILD WHERE Ethnicity_Code IS NULL
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- Re-run most common so not stated are included 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_MOST_COMMON AS (
SELECT DISTINCT em.ALF_PE, Ethnicity_Code, MAX_COUNT 
FROM SESSION.ETHNICITY_COUNT ec 
INNER JOIN SESSION.ETHNICITY_MAX em ON ec.Ethnicity_Code_Count = em.MAX_COUNT AND ec.alf_pe = em.alf_pe 
WHERE em.ALF_PE = ec.alf_pe AND ec.Ethnicity_Code_Count = em.MAX_COUNT
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- find those with Nulls that are actually not stated 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ILD_NOTSTATED AS (
SELECT ecn.ALF_PE, ecm.ETHNICITY_CODE FROM SESSION.ETHNICITY_ILD_NULLS ecn 
INNER JOIN SESSION.ETHNICITY_MOST_COMMON ecm ON ecm.ALF_PE = ecn.ALF_PE
WHERE ecm.ETHNICITY_CODE IN(SELECT READCODE FROM sailw1387v.SS_ETHNICITY_CODES WHERE Ethnicity6 = 'Not Stated') 
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

SELECT * FROM SESSION.ETHNICITY_ILD_NOTSTATED

---- join into main table 
DECLARE GLOBAL TEMPORARY TABLE ETHNICITY_ILD_V2 AS (
SELECT DISTINCT ec.ALF_PE
, CASE WHEN ec.Ethnicity_Code IS NULL THEN ecn.Ethnicity_Code ELSE ec.ETHNICITY_CODE END AS ETHNICITY_CODE
, ETHNICTITY_DESCRIPTION_5
, ETHNICTITY_DESCRIPTION_11
, ETHNICTITY_DESCRIPTION_21
FROM SESSION.ETHNICITY_ILD ec
LEFT JOIN SESSION.ETHNICITY_ILD_NOTSTATED ecn ON ecn.ALF_PE = ec.ALF_PE AND ecn.ETHNICITY_CODE = ec.ETHNICITY_CODE
ORDER BY ec.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;
*/

------------------------------------------------------------------------------------DEMOGRAPHIC TABLE--------------------------------------------------------------------------------------------------
-- Select latest registration date per ALF
DECLARE GLOBAL TEMPORARY TABLE Registration_ILD AS (
SELECT DISTINCT pci.ALF_PE, min(FROM_DT) AS FOLLOW_UP_START,
CASE WHEN (max(TO_DT) IS NULL OR max(TO_DT) = '01/01/9999') THEN max(TO_DT) 
WHEN (max(wap.DOD) < max(TO_DT) OR max(wap.DOD) IS NULL) THEN max(wap.DOD) ELSE max(TO_DT) 
END AS FOLLOW_UP_END 
FROM SAIL1387V.WDSD_AR_PERS_GP_20220307 wapg 
LEFT JOIN SAIL1387V.WDSD_AR_PERS_20220307 wap ON wapg.PERS_ID_PE  = wap.PERS_ID_PE 
INNER JOIN SESSION.prototype_cohort_ILD pci ON wap.ALF_PE = pci.alf_PE
WHERE wapg.FROM_DT > pci.WOB 
GROUP BY pci.ALF_PE 
ORDER BY pci.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-------- Identify True First Event for each ALF from GP and PEDW 
DECLARE GLOBAL TEMPORARY TABLE MIN_ILD_PEDW AS (
SELECT DISTINCT ps.ALF_PE, MIN(ep.EPI_STR_DT) AS FIRST_DIAGNOSIS_DT_PEDW
FROM SAIL1387V.PEDW_EPISODE_20220228 ep  
LEFT JOIN SAIL1387V.PEDW_SPELL_20220228 ps ON ps.PROV_UNIT_CD = ep.PROV_UNIT_CD AND  ps.SPELL_NUM_PE = ep.SPELL_NUM_PE
INNER JOIN SESSION.prototype_cohort_ILD gp ON gp.ALF_PE = ps.ALF_PE
INNER JOIN SAILW1387V.SS_ILD_ICDCODES CP ON CP.CODE = ep.DIAG_CD_123
WHERE YEAR(ep.EPI_STR_DT) > (YEAR(WOB) + 1)
GROUP BY ps.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

SELECT * FROM SESSION.MIN_ILD_PEDW
ORDER BY ALF_PE

SELECT COUNT(ALF_PE), COUNT(DISTINCT ALF_PE) FROM SESSION.MIN_ILD_PEDW


-----  Construct Final demographic table 
DECLARE GLOBAL TEMPORARY TABLE DEMOGRAPHIC_TABLE_ILD AS (SELECT DISTINCT wgec.ALF_PE, per.WOB, Ethnicity_Code, ETHNICTITY_DESCRIPTION_5, ETHNICTITY_DESCRIPTION_21, YEAR(per.WOB) AS YEAR_OF_BIRTH, lsoa.WIMD_2011_QUINTILE, wgec.GNDR_CD, per.DOD, FIRST_DIAGNOSIS_DT, FOLLOW_UP_START , FOLLOW_UP_END, INCIDENT, PREVALENT ,
CASE WHEN FIRST_DIAGNOSIS_DT > FIRST_DIAGNOSIS_DT_PEDW AND FIRST_DIAGNOSIS_DT_PEDW IS NOT NULL THEN FIRST_DIAGNOSIS_DT_PEDW ELSE FIRST_DIAGNOSIS_DT END AS EARLIEST_MENTION
FROM SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec 
LEFT JOIN SAIL1387V.WDSD_AR_PERS_20220307 per  ON per.ALF_PE = wgec.ALF_PE
LEFT JOIN SESSION.MIN_ILD_DIAG ildd ON wgec.ALF_PE = ildd.ALF_PE
LEFT JOIN sailw1387V.SS_ILD_LSOA lsoa ON wgec.ALF_PE = lsoa.ALF_PE
INNER JOIN sailw1387v.SS_ILD_CODES ild ON wgec.EVENT_CD = ild.EVENT_CD
LEFT JOIN SESSION.Registration_ILD ri ON ri.ALF_PE = wgec.ALF_PE 
LEFT JOIN SESSION.ETHNICITY_ILD et ON et.alf_pe = wgec.alf_pe
LEFT JOIN SESSION.MIN_ILD_PEDW mp ON mp.ALF_PE = wgec.ALF_PE
WHERE (wgec.GNDR_CD = '1' OR wgec.GNDR_CD = '2') --// only alows for a clearly defined gender code - delete if not applicable   
AND (DOD > '31/12/2003' OR DOD IS NULL) --// change to day before project start date
AND FIRST_DIAGNOSIS_DT > per.WOB 
AND ILD.EVENT_CD = wgec.EVENT_CD
AND (FOLLOW_UP_END > '31/12/2003') --// change to day before project start date
AND (2019 - YEAR(wgec.WOB)) >= '40' --// Remove this to remove age cap on cohort
AND (YEAR(wgec.EVENT_DT)- YEAR(per.WOB)) >= '40' --// remove events where the person is under 40 at the time
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

SELECT COUNT(DISTINCT ALF_PE) FROM sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD

-- Code to drop table before adding alterations 
DROP TABLE sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD

-- Create perminent table 
CREATE TABLE sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD(
 ALF_PE BIGINT, 
 WOB DATE, 
 Ethnicity_Code VARCHAR(5), 
 ETHNICTITY_DESCRIPTION_5 VARCHAR(100), 
 ETHNICTITY_DESCRIPTION_21 VARCHAR(100), 
 YEAR_OF_BIRTH INT, 
 WIMD_2011_QUINTILE INT, 
 GNDR_CD INT, 
 DOD DATE, 
 FIRST_DIAGNOSIS_DT DATE, 
 FOLLOW_UP_START DATE, 
 FOLLOW_UP_END DATE,
 EARLIEST_MENTION DATE
)

INSERT INTO sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD
SELECT DISTINCT ALF_PE , 
 WOB , 
 Ethnicity_Code, 
 ETHNICTITY_DESCRIPTION_5, 
 ETHNICTITY_DESCRIPTION_21, 
 YEAR_OF_BIRTH, 
 WIMD_2011_QUINTILE, 
 GNDR_CD, 
 DOD, 
 FIRST_DIAGNOSIS_DT, 
 FOLLOW_UP_START, 
 FOLLOW_UP_END,
 EARLIEST_MENTION 
FROM SESSION.DEMOGRAPHIC_TABLE_ILD

------------------------------------------------------------------------------------ ILD TYPE ---------------------------------------------------------------------------------------------------------

-- establish type/types of ILD per individual
DECLARE GLOBAL TEMPORARY TABLE ILD_TYPE AS (
SELECT DISTINCT 
dti.ALF_PE
,MAX(incident) AS INCIDENT	 
,MAX(prevalent)	AS PREVALENT
,MAX(broad_ipf) AS IPF_BROAD
,MAX(narrow_ipf) AS IPF_NARROW
,MAX(treatment_ild)	AS TREATMENT
,MAX(exposure_ild)	AS EXPOSURE
,MAX(autoimmune_ild) AS AUTOIMMUNE	
,MAX(other) AS OTHER
FROM sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD dti
INNER JOIN SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec ON wgec.ALF_PE = dti.ALF_PE 
INNER JOIN sailw1387v.SS_ILD_CODES ild ON wgec.EVENT_CD = ild.EVENT_CD
WHERE FOLLOW_UP_END > '31/12/2019' AND (DOD > '31/12/2019' OR DOD IS NULL )
GROUP BY dti.ALF_PE
ORDER BY dti.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- select sum of flags 
SELECT SUM(INCIDENT) AS INCIDENT	 
, SUM(PREVALENT) AS PREVALENT
, SUM(IPF_BROAD) AS IPF_BROAD
, SUM(IPF_NARROW) AS IPF_NARROW
, SUM(TREATMENT) AS TREATMENT
, SUM(EXPOSURE) AS EXPOSURE
, SUM(AUTOIMMUNE) AS AUTOIMMUNE	
, SUM(OTHER) AS OTHER
FROM SESSION.ILD_TYPE

-- Proportion of ILD types for graphs 
SELECT ((SUM(INCIDENT)/'24799')*'100') AS INCIDENT	 
, ((SUM(PREVALENT)/'24799')*'100') AS PREVALENT
, ((SUM(IPF)/'24799')*'100') AS IPF
, ((SUM(TREATMENT)/'24799')*'100') AS TREATMENT
, ((SUM(EXPOSURE)/'24799')*'100') AS EXPOSURE
, ((SUM(AUTOIMMUNE)/'24799')*'100') AS AUTOIMMUNE	
, ((SUM(OTHER)/'24799')*'100') AS OTHER
FROM SESSION.ILD_TYPE

---- Proportion by gender and age for graphs

SELECT GNDR_CD
, ((SUM(INCIDENT)/'24799')*'100') AS INCIDENT	 
, ((SUM(PREVALENT)/'24799')*'100') AS PREVALENT
, ((SUM(IPF)/'24799')*'100') AS IPF
, ((SUM(TREATMENT)/'24799')*'100') AS TREATMENT
, ((SUM(EXPOSURE)/'24799')*'100') AS EXPOSURE
, ((SUM(AUTOIMMUNE)/'24799')*'100') AS AUTOIMMUNE	
, ((SUM(OTHER)/'24799')*'100') AS OTHER
FROM SESSION.ILD_TYPE it
INNER JOIN sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD dti ON dti.ALF_PE = it.ALF_PE
GROUP BY GNDR_CD
ORDER BY GNDR_CD

SELECT ('2019'- Year(WOB)) AS AGE_AT_STUDY_END
, ((SUM(INCIDENT)/'24799')*'100') AS INCIDENT	 
, ((SUM(PREVALENT)/'24799')*'100') AS PREVALENT
, ((SUM(IPF)/'24799')*'100') AS IPF
, ((SUM(TREATMENT)/'24799')*'100') AS TREATMENT
, ((SUM(EXPOSURE)/'24799')*'100') AS EXPOSURE
, ((SUM(AUTOIMMUNE)/'24799')*'100') AS AUTOIMMUNE	
, ((SUM(OTHER)/'24799')*'100') AS OTHER
FROM SESSION.ILD_TYPE it
INNER JOIN sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD dti ON dti.ALF_PE = it.ALF_PE
GROUP BY ('2019'- Year(WOB))
ORDER BY ('2019'- Year(WOB)) 


------------------------------------------------------------------------------------CONDITIONS TABLE--------------------------------------------------------------------------------------------------
--Create Start and End date fields 
DECLARE GLOBAL TEMPORARY TABLE FIRST_EVENTS_ILD AS (
SELECT DISTINCT wgec.ALF_PE, wgec.EVENT_CD, MIN(EVENT_DT) AS START_DATE, MAX(EVENT_DT) AS LATEST_EVENT
FROM SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec
INNER JOIN sailw1387v.SS_ILD_CODES ild ON ild.EVENT_CD = wgec.EVENT_CD 
INNER JOIN sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD DTI ON DTI.ALF_PE = wgec.ALF_PE
GROUP BY wgec.ALF_PE, wgec.EVENT_CD
ORDER BY wgec.ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

SELECT * FROM SESSION.FIRST_EVENTS_ILD

-- Create table of all events that have occured per individual
DECLARE GLOBAL TEMPORARY TABLE CONDITIONS_TABLE_ILD AS (SELECT wgec.ALF_PE, wgec.EVENT_CD, wgec.EVENT_DT, START_DATE, LATEST_EVENT, INCIDENT, PREVALENT, 'ILD' AS CONDITION_TYPE, 'GP' AS DATASET_SOURCE 
FROM SAIL1387V.WLGP_GP_EVENT_CLEANSED_20220201 wgec 
LEFT JOIN SESSION.FIRST_EVENTS_ILD sdi ON sdi.ALF_PE = wgec.ALF_PE AND sdi.EVENT_CD = wgec.EVENT_CD 
INNER JOIN sailw1387v.SS_ILD_CODES ild ON ild.EVENT_CD = wgec.EVENT_CD
INNER JOIN sailw1387v.SS_DEMOGRAPHIC_TABLE_ILD DTI ON DTI.ALF_PE = wgec.ALF_PE
WHERE (wgec.GNDR_CD = '1' OR wgec.GNDR_CD = '2') 
) WITH DATA WITH replace ON commit PRESERVE ROWS ;

-- Code to drop table before adding alterations 
DROP TABLE sailw1387v.SS_CONDITIONS_TABLE_ILD

-- Create perminent table 
CREATE TABLE sailw1387v.SS_CONDITIONS_TABLE_ILD(
ALF_PE BIGINT
, EVENT_CD VARCHAR(5)
, EVENT_DT date 
, START_DATE DATE
, LATEST_EVENT DATE
, CONDITION_TYPE VARCHAR(100)
, DATASET_SOURCE VARCHAR(100))

INSERT INTO sailw1387v.SS_CONDITIONS_TABLE_ILD
SELECT ALF_PE
, EVENT_CD
, EVENT_DT
, START_DATE
, LATEST_EVENT
, CONDITION_TYPE
, DATASET_SOURCE 
FROM SESSION.CONDITIONS_TABLE_ILD

------------------------------------------------------------------------------------VACCINATIONS TABLE-------------------------------------------------------------------------------------------------

-- Use cohort to assemble Vaccine data
DECLARE GLOBAL TEMPORARY TABLE ILD_VACCINATION_DATA AS (
SELECT DISTINCT scc.ALF_PE , VACC_DATE_OF_VACCINE, (YEAR(VACC_DATE_OF_VACCINE) - YEAR_OF_BIRTH) AS AGE_AT_VACCINATION, VACC_LOCATION_CODE, VACCINATIONLOCATIONTYPE, APPT_OUTCOME, CWO.PRS_PREFERRED_LANGUAGE, OPT_VACCINE, VACC_VACCINE_NAME, VACC_SITE_OF_ADMINISTRATION, VACC_ADVERSE_REACTION, VACC_ADVERSE_REACTION_TYPE 
FROM SAIL1387V.CVVD_WIS_OUTCOMEDATAV2_20220310 CWO 
INNER JOIN sailw1387V.SS_DEMOGRAPHIC_TABLE_ILD scc ON scc.ALF_PE = CWO.ALF_PE 
ORDER BY ALF_PE
) WITH DATA WITH replace ON commit PRESERVE ROWS

-- Drop table to add changes if nessisary 
DROP TABLE sailw1387V.SS_ILD_VACCINATION_DATA

-- Create perminent table 
CREATE TABLE sailw1387V.SS_ILD_VACCINATION_DATA(
ALF_PE BIGINT
, VACC_DATE_OF_VACCINE DATE
, AGE_AT_VACCINATION INT
, VACC_LOCATION_CODE VARCHAR(100)
, VACCINATIONLOCATIONTYPE VARCHAR(100)
, APPT_OUTCOME VARCHAR(100)
, PRS_PREFERRED_LANGUAGE VARCHAR(100)
, OPT_VACCINE VARCHAR(100)
, VACC_VACCINE_NAME VARCHAR(100)
, VACC_SITE_OF_ADMINISTRATION VARCHAR(100)
, VACC_ADVERSE_REACTION VARCHAR(100)
, VACC_ADVERSE_REACTION_TYPE VARCHAR(100))

INSERT INTO sailw1387V.SS_ILD_VACCINATION_DATA
SELECT DISTINCT 
ALF_PE 
, VACC_DATE_OF_VACCINE
, AGE_AT_VACCINATION
, VACC_LOCATION_CODE
, VACCINATIONLOCATIONTYPE
, APPT_OUTCOME
, PRS_PREFERRED_LANGUAGE
, OPT_VACCINE
, VACC_VACCINE_NAME
, VACC_SITE_OF_ADMINISTRATION
, VACC_ADVERSE_REACTION
, VACC_ADVERSE_REACTION_TYPE
FROM SESSION.ILD_VACCINATION_DATA
ORDER BY ALF_PE


